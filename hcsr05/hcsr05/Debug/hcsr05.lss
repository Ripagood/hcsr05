
hcsr05.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800200  000002d6  0000036a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800214  00800214  0000037e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000037e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000003ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000397  00000000  00000000  00000406  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001ef  00000000  00000000  0000079d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f5  00000000  00000000  0000098c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  00000c84  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000235  00000000  00000000  00000d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000311  00000000  00000000  00000f81  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00001292  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3f c0       	rjmp	.+126    	; 0x124 <__vector_41>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 ed       	ldi	r30, 0xD6	; 214
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 31       	cpi	r26, 0x14	; 20
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a4 e1       	ldi	r26, 0x14	; 20
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a1 32       	cpi	r26, 0x21	; 33
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	b3 d0       	rcall	.+358    	; 0x286 <main>
 120:	d8 c0       	rjmp	.+432    	; 0x2d2 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <__vector_41>:
	average[0]=value;
	sum+=average[0];
	
	return (sum >> 2);
	
}
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	0b b6       	in	r0, 0x3b	; 59
 130:	0f 92       	push	r0
 132:	8f 93       	push	r24
 134:	9f 93       	push	r25
 136:	ef 93       	push	r30
 138:	ff 93       	push	r31
 13a:	80 91 a1 00 	lds	r24, 0x00A1
 13e:	86 ff       	sbrs	r24, 6
 140:	0e c0       	rjmp	.+28     	; 0x15e <__vector_41+0x3a>
 142:	80 91 a6 00 	lds	r24, 0x00A6
 146:	90 91 a7 00 	lds	r25, 0x00A7
 14a:	90 93 1e 02 	sts	0x021E, r25
 14e:	80 93 1d 02 	sts	0x021D, r24
 152:	e1 ea       	ldi	r30, 0xA1	; 161
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	8f 7b       	andi	r24, 0xBF	; 191
 15a:	80 83       	st	Z, r24
 15c:	16 c0       	rjmp	.+44     	; 0x18a <__vector_41+0x66>
 15e:	80 91 a6 00 	lds	r24, 0x00A6
 162:	90 91 a7 00 	lds	r25, 0x00A7
 166:	90 93 20 02 	sts	0x0220, r25
 16a:	80 93 1f 02 	sts	0x021F, r24
 16e:	e2 e7       	ldi	r30, 0x72	; 114
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	8f 7d       	andi	r24, 0xDF	; 223
 176:	80 83       	st	Z, r24
 178:	10 92 a5 00 	sts	0x00A5, r1
 17c:	10 92 a4 00 	sts	0x00A4, r1
 180:	10 92 a1 00 	sts	0x00A1, r1
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	80 93 1c 02 	sts	0x021C, r24
 18a:	ff 91       	pop	r31
 18c:	ef 91       	pop	r30
 18e:	9f 91       	pop	r25
 190:	8f 91       	pop	r24
 192:	0f 90       	pop	r0
 194:	0b be       	out	0x3b, r0	; 59
 196:	0f 90       	pop	r0
 198:	0f be       	out	0x3f, r0	; 63
 19a:	0f 90       	pop	r0
 19c:	1f 90       	pop	r1
 19e:	18 95       	reti

000001a0 <initSerialPC>:
 1a0:	87 e6       	ldi	r24, 0x67	; 103
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	90 93 c5 00 	sts	0x00C5, r25
 1a8:	80 93 c4 00 	sts	0x00C4, r24
 1ac:	88 e1       	ldi	r24, 0x18	; 24
 1ae:	80 93 c1 00 	sts	0x00C1, r24
 1b2:	86 e0       	ldi	r24, 0x06	; 6
 1b4:	80 93 c2 00 	sts	0x00C2, r24
 1b8:	08 95       	ret

000001ba <serialPCtx>:
 1ba:	e0 ec       	ldi	r30, 0xC0	; 192
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	90 81       	ld	r25, Z
 1c0:	95 ff       	sbrs	r25, 5
 1c2:	fd cf       	rjmp	.-6      	; 0x1be <serialPCtx+0x4>
 1c4:	80 93 c6 00 	sts	0x00C6, r24
 1c8:	08 95       	ret

000001ca <serialPCtxArray>:
 1ca:	0f 93       	push	r16
 1cc:	1f 93       	push	r17
 1ce:	cf 93       	push	r28
 1d0:	df 93       	push	r29
 1d2:	06 2f       	mov	r16, r22
 1d4:	66 23       	and	r22, r22
 1d6:	41 f0       	breq	.+16     	; 0x1e8 <serialPCtxArray+0x1e>
 1d8:	c8 2f       	mov	r28, r24
 1da:	d9 2f       	mov	r29, r25
 1dc:	10 e0       	ldi	r17, 0x00	; 0
 1de:	89 91       	ld	r24, Y+
 1e0:	ec df       	rcall	.-40     	; 0x1ba <serialPCtx>
 1e2:	1f 5f       	subi	r17, 0xFF	; 255
 1e4:	10 13       	cpse	r17, r16
 1e6:	fb cf       	rjmp	.-10     	; 0x1de <serialPCtxArray+0x14>
 1e8:	df 91       	pop	r29
 1ea:	cf 91       	pop	r28
 1ec:	1f 91       	pop	r17
 1ee:	0f 91       	pop	r16
 1f0:	08 95       	ret

000001f2 <average8>:
 1f2:	ab e1       	ldi	r26, 0x1B	; 27
 1f4:	b2 e0       	ldi	r27, 0x02	; 2
 1f6:	44 e1       	ldi	r20, 0x14	; 20
 1f8:	52 e0       	ldi	r21, 0x02	; 2
 1fa:	fd 01       	movw	r30, r26
 1fc:	20 e0       	ldi	r18, 0x00	; 0
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	9e 91       	ld	r25, -X
 202:	90 83       	st	Z, r25
 204:	92 91       	ld	r25, -Z
 206:	29 0f       	add	r18, r25
 208:	31 1d       	adc	r19, r1
 20a:	e4 17       	cp	r30, r20
 20c:	f5 07       	cpc	r31, r21
 20e:	c1 f7       	brne	.-16     	; 0x200 <average8+0xe>
 210:	80 93 14 02 	sts	0x0214, r24
 214:	28 0f       	add	r18, r24
 216:	31 1d       	adc	r19, r1
 218:	c9 01       	movw	r24, r18
 21a:	92 95       	swap	r25
 21c:	82 95       	swap	r24
 21e:	8f 70       	andi	r24, 0x0F	; 15
 220:	89 27       	eor	r24, r25
 222:	9f 70       	andi	r25, 0x0F	; 15
 224:	89 27       	eor	r24, r25
 226:	08 95       	ret

00000228 <takeMeasureCm>:

uint8_t takeMeasureCm(void){
	uint16_t measure;
	//send pulse on trigger pin
	PORTL |= (1<<PL1);
 228:	eb e0       	ldi	r30, 0x0B	; 11
 22a:	f1 e0       	ldi	r31, 0x01	; 1
 22c:	80 81       	ld	r24, Z
 22e:	82 60       	ori	r24, 0x02	; 2
 230:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 232:	8a e4       	ldi	r24, 0x4A	; 74
 234:	8a 95       	dec	r24
 236:	f1 f7       	brne	.-4      	; 0x234 <takeMeasureCm+0xc>
	_delay_us(30);
	PORTL &= ~(1<<PL1);
 238:	80 81       	ld	r24, Z
 23a:	8d 7f       	andi	r24, 0xFD	; 253
 23c:	80 83       	st	Z, r24
	//TCCR4B = (1<<ICNC4)|(1<<ICES4)|(1<<CS41)|(1<<CS40);//rising edge, prescaler = 64
	TCCR4B = (1<<ICNC4)|(1<<ICES4)|(1<<CS41);//rising edge, prescaler = 8 ,
 23e:	82 ec       	ldi	r24, 0xC2	; 194
 240:	80 93 a1 00 	sts	0x00A1, r24
	TIMSK4 = (1<<ICIE4); // enable interrupt
 244:	80 e2       	ldi	r24, 0x20	; 32
 246:	80 93 72 00 	sts	0x0072, r24
	while(!measureReady);
 24a:	80 91 1c 02 	lds	r24, 0x021C
 24e:	88 23       	and	r24, r24
 250:	e1 f3       	breq	.-8      	; 0x24a <takeMeasureCm+0x22>
	measureReady=0;
 252:	10 92 1c 02 	sts	0x021C, r1
	measure = time2-time1;
 256:	20 91 1f 02 	lds	r18, 0x021F
 25a:	30 91 20 02 	lds	r19, 0x0220
 25e:	80 91 1d 02 	lds	r24, 0x021D
 262:	90 91 1e 02 	lds	r25, 0x021E
 266:	2c 5f       	subi	r18, 0xFC	; 252
 268:	3f 4f       	sbci	r19, 0xFF	; 255
	measure +=4;// beacuse of noise canceller
 26a:	28 1b       	sub	r18, r24
 26c:	39 0b       	sbc	r19, r25
	//measure *=4;
	measure /= 116; // (58*2)
 26e:	af e9       	ldi	r26, 0x9F	; 159
 270:	b6 e4       	ldi	r27, 0x46	; 70
 272:	20 d0       	rcall	.+64     	; 0x2b4 <__umulhisi3>
 274:	96 95       	lsr	r25
 276:	87 95       	ror	r24
 278:	92 95       	swap	r25
 27a:	82 95       	swap	r24
 27c:	8f 70       	andi	r24, 0x0F	; 15
 27e:	89 27       	eor	r24, r25
 280:	9f 70       	andi	r25, 0x0F	; 15
 282:	89 27       	eor	r24, r25
	
	return (uint8_t) measure;
	
}
 284:	08 95       	ret

00000286 <main>:
int main(void)
{
	uint16_t measure=0;
	char asciiMeasure[2];
	
	initSerialPC();
 286:	8c df       	rcall	.-232    	; 0x1a0 <initSerialPC>
	//SETUP INPUT CAPTURE
	serialPCtxArray("Initializing ICP1\n",18);
 288:	62 e1       	ldi	r22, 0x12	; 18
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	92 e0       	ldi	r25, 0x02	; 2
 28e:	9d df       	rcall	.-198    	; 0x1ca <serialPCtxArray>
	DDRL |= (1<<PL1);//pl1 as trigger output
 290:	ea e0       	ldi	r30, 0x0A	; 10
 292:	f1 e0       	ldi	r31, 0x01	; 1
 294:	80 81       	ld	r24, Z
 296:	82 60       	ori	r24, 0x02	; 2
 298:	80 83       	st	Z, r24
	DDRL &= ~(1<<PL0);
 29a:	80 81       	ld	r24, Z
 29c:	8e 7f       	andi	r24, 0xFE	; 254
 29e:	80 83       	st	Z, r24
	PORTL |= (1<<PL0); //pl0 as input and with pull up
 2a0:	eb e0       	ldi	r30, 0x0B	; 11
 2a2:	f1 e0       	ldi	r31, 0x01	; 1
 2a4:	80 81       	ld	r24, Z
 2a6:	81 60       	ori	r24, 0x01	; 1
 2a8:	80 83       	st	Z, r24
	
	
	
	
	sei();
 2aa:	78 94       	sei
	
	
    while(1)
    {
		//serialPCtx(takeMeasureCm());
		serialPCtx(average8(takeMeasureCm()));
 2ac:	bd df       	rcall	.-134    	; 0x228 <takeMeasureCm>
 2ae:	a1 df       	rcall	.-190    	; 0x1f2 <average8>
 2b0:	84 df       	rcall	.-248    	; 0x1ba <serialPCtx>
 2b2:	fc cf       	rjmp	.-8      	; 0x2ac <main+0x26>

000002b4 <__umulhisi3>:
 2b4:	a2 9f       	mul	r26, r18
 2b6:	b0 01       	movw	r22, r0
 2b8:	b3 9f       	mul	r27, r19
 2ba:	c0 01       	movw	r24, r0
 2bc:	a3 9f       	mul	r26, r19
 2be:	70 0d       	add	r23, r0
 2c0:	81 1d       	adc	r24, r1
 2c2:	11 24       	eor	r1, r1
 2c4:	91 1d       	adc	r25, r1
 2c6:	b2 9f       	mul	r27, r18
 2c8:	70 0d       	add	r23, r0
 2ca:	81 1d       	adc	r24, r1
 2cc:	11 24       	eor	r1, r1
 2ce:	91 1d       	adc	r25, r1
 2d0:	08 95       	ret

000002d2 <_exit>:
 2d2:	f8 94       	cli

000002d4 <__stop_program>:
 2d4:	ff cf       	rjmp	.-2      	; 0x2d4 <__stop_program>
